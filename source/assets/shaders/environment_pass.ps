#version 450

layout(location = 0) in vec2 attr_uv;
layout(binding = 0) uniform sampler2D tex_pixelMap;

layout(location = 0) out vec4 out_pixel0;


void ScanSurroundings(inout float lavaGlowIntensity, inout float pixelObstructionFactor)
{
	ivec2 pixelMapSize = textureSize(tex_pixelMap, 0);
	vec2 pixelMapPixelSize = vec2(1.0) / vec2(pixelMapSize);

	float Pi = 6.28318530718; // Pi*2
	float Directions = 16.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)
	float Quality = 8.0f; // BLUR QUALITY (Default 4.0 - More is better but slower)
	//float Size = 8.0; // BLUR SIZE (Radius)

	vec2 Radius = 12.0 * pixelMapPixelSize;

	// Blur calculations
	int totalPixels = 0;
	int lavaPixels = 0;
	int filledPixels = 0;
	for (float d=0.0; d<Pi; d+=Pi/Directions)
	{
		for(float i=1.0/Quality; i<=1.0; i+=1.0/Quality)
		{
			totalPixels++;
			vec2 pixelMapSample = texture(tex_pixelMap, attr_uv + vec2(cos(d),sin(d)) * (Radius * i)).rg;
			int pixelType = int(pixelMapSample.r * 255.0f + 0.5);
			if (pixelType == 0)
				continue; // dont draw air pixels -> Even if its air, it might be influenced by glow effects
			filledPixels++;
			if(pixelType == 4)
				lavaPixels++;
		}
	}

	lavaGlowIntensity = float(lavaPixels) / float(totalPixels);
	pixelObstructionFactor = float(filledPixels) / float(totalPixels);
	//pixelObstructionFactor = 1.0 - pixelObstructionFactor * 0.1; // 0.9 to 1.0 range
	pixelObstructionFactor = 0.4 + pixelObstructionFactor * 0.6;
}

void main()
{
	float lavaGlowIntensity = 1.0f;
	float pixelObstructionFactor = 1.0f;
	ScanSurroundings(lavaGlowIntensity, pixelObstructionFactor);

	out_pixel0 = vec4(lavaGlowIntensity, pixelObstructionFactor, 0.0, 0.0);
}
