#version 450

// inputs
layout(location = 0) in vec2 attr_uv;
layout(binding = 0) uniform sampler2D tex_pixelMap;
layout(binding = 0) uniform uf_data {
	vec2 pixelSize;
	uint isVertical;
};

// outputs
layout(location = 0) out vec2 out_pixel0;

// constants
const int Quality = 5; // Number of samples per direction
const float Weights[5] = float[](0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);  // Weights for the samples

void main()
{
	out_pixel0 = texture(tex_pixelMap, attr_uv).rg * Weights[0];
	for (int i = 1; i < Quality; i++)
	{
		vec2 currentSamplePos = isVertical == 0 ? vec2(pixelSize.x * i, 0.0) : vec2(0.0, pixelSize.y * i);
		out_pixel0 += texture(tex_pixelMap, attr_uv + currentSamplePos).rg * Weights[i];
		out_pixel0 += texture(tex_pixelMap, attr_uv - currentSamplePos).rg * Weights[i];
	}
	if (out_pixel0.r >= 0.1) {
		out_pixel0.g = 1.0;
	}
}