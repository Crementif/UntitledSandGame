#version 450

layout(location = 0) in vec2 attr_uv;
layout(binding = 0) uniform sampler2D tex_pixelMap;

layout(location = 0) out vec4 out_pixel0;

void ScanSurroundings(out float lavaGlowIntensity, out float pixelObstructionFactor)
{
	ivec2 pixelMapSize = textureSize(tex_pixelMap, 0);
	vec2 pixelMapPixelSize = vec2(1.0) / vec2(pixelMapSize);

	const float Pi = 6.28318530718; // Pi*2
	const int Directions = 6; // Number of directions to sample
	const int Quality = 5; // Number of samples per direction

	const vec2 Radius = 12.0 * pixelMapPixelSize;

	// Initialize counters
	int totalPixels = 0;
	int lavaPixels = 0;
	int filledPixels = 0;

	for (int d = 0; d < Directions; ++d)
	{
		float angle = float(d) * (Pi / float(Directions));
		vec2 dir = vec2(cos(angle), sin(angle)) * Radius / float(Quality);
		vec2 currentSamplePos = attr_uv;
		for (int i = 0; i < Quality; ++i)
		{
			currentSamplePos += dir;
			vec2 pixelMapSample = texture(tex_pixelMap, currentSamplePos).rg;
			int pixelType = int(pixelMapSample.r * 255.0 + 0.5);
			if (pixelType != 0) // Skip air pixels
			{
				filledPixels++;
				if (pixelType == 4)
				{
					lavaPixels++;
				}
			}
			totalPixels++;
		}
	}

	// Calculate intensities
	lavaGlowIntensity = float(lavaPixels) / float(totalPixels);
	pixelObstructionFactor = float(filledPixels) / float(totalPixels);
	pixelObstructionFactor = 0.4 + pixelObstructionFactor * 0.6;
}

void main()
{
	float lavaGlowIntensity;
	float pixelObstructionFactor;
	ScanSurroundings(lavaGlowIntensity, pixelObstructionFactor);

	out_pixel0 = vec4(lavaGlowIntensity, pixelObstructionFactor, 0.0, 0.0);
}